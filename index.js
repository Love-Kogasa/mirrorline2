// Generated by LiveScript 1.6.0
(function(){
  var express, fs, url, path, engine, app, loadBody, getParams, port;
  express = require('express');
  fs = require('fs');
  url = require('url');
  path = require('path');
  engine = require('./engine');
  app = express();
  app.use("/_pages", express['static'](__dirname + "/assets"));
  app.use("/public", express['static'](__dirname + "/public"));
  loadBody = function(path, title){
    var source;
    title == null && (title = "ProxyBrowser");
    source = fs.readFileSync(__dirname + "/assets/template.html").toString();
    source = source.replace("{{body}}", fs.readFileSync(__dirname + "/" + path).toString());
    source = source.replace("{{title}}", title);
    return source;
  };
  getParams = function(requrl){
    var dt, i$, ref$, len$, param, ref1$, key, value;
    dt = {};
    for (i$ = 0, len$ = (ref$ = url.parse(requrl).query.split("&")).length; i$ < len$; ++i$) {
      param = ref$[i$];
      ref1$ = param.split("="), key = ref1$[0], value = ref1$[1];
      dt[decodeURIComponent(key)] = decodeURIComponent(value);
    }
    return dt;
  };
  app.get("/", function(req, res){
    var x$;
    x$ = res;
    x$.status(200);
    x$.send(loadBody("assets/index.html"));
    x$.end();
    return x$;
  });
  app.get("/search", function(req, res){
    var params, page, safe, data, ref$, suggestion, result, i$, len$, site;
    params = getParams(req.url);
    page = loadBody("assets/search.html", params.search);
    safe = 0;
    if (params.search === "") {
      params.search = "Google";
    }
    if (params.safe === "safe") {
      safe = 2;
    }
    if (!deepEq$(params.type, "files", '===')) {
      data = [];
      ref$ = engine.search({
        q: params.search,
        page: params.p || 1
      }), suggestion = ref$.suggestion, result = ref$.result;
      for (i$ = 0, len$ = result.length; i$ < len$; ++i$) {
        site = result[i$];
        data.push("<div class=\"card\"><h4 class=title>" + site.title + "</h4><a> " + site.url.join(" > ") + "</a><div>" + site.content + "</div></div>");
      }
      page = page.replace("{{sugg}}", "<li><a>" + suggestion.join("</a></li><li><a>") + "</a></li>");
      page = page.replace("{{datas}}", data.join("\n"));
    } else {
      data = [];
      page = page.replace("{{sugg}}", "<li><a>" + params.search + "</a></li>");
      for (i$ = 0, len$ = (ref$ = engine.file(params.search)).length; i$ < len$; ++i$) {
        site = ref$[i$];
        data.push("<div class=\"card\"><h4 class=title>" + site.title + "</h4><br><a>" + site.url.join(" > ") + "</a><div><a href=\"" + site.magnet + "\">磁力链接</a><div>" + site.status + "</div></div></div>");
      }
      page = page.replace("{{datas}}", data.join("\n"));
    }
    return res.send(page);
  });
  app.all("/proxy*", function(req, res){
    return res.send(loadBody("assets/proxy.html"));
  });
  app.use(function(req, res){
    var x$;
    x$ = res;
    x$.status(404);
    x$.send(loadBody("assets/404.html", "404Error"));
    x$.end();
    return x$;
  });
  port = parseInt(Math.floor(Math.random() * 1000).toString().padEnd(4, "0"));
  if (deepEq$(port, 3000, '===')) {
    port += 1;
  }
  app.listen(process.env.PORT || port, function(){
    return console.log("ServerAlreadyStart At : " + port);
  });
  module.exports = app;
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) {
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);
